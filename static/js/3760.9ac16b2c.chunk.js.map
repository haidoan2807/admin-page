{"version":3,"file":"static/js/3760.9ac16b2c.chunk.js","mappings":"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","sources":["views/pages/campaign/components/add-sales-value.js","views/pages/tracksales/import-history/components/header.js","views/pages/tracksales/components/view-or-edit-track-sale.js","views/pages/tracksales/track-sale-list/index.js","views/pages/tracksales/import-history/index.js","views/pages/tracksales/index.js","components/toastify/index.js","views/pages/tracksales/track-sale-list/components/import-track-sale.js"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  CCol,\n  CFormInput,\n  CFormLabel,\n  CFormTextarea,\n  CInputGroup,\n  CInputGroupText,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from '@coreui/react'\nimport { render, unmountComponentAtNode } from 'react-dom'\nimport CustomButton from '../../../../components/custombutton'\nimport makeAnimated from 'react-select/animated'\nimport CustomSelectInput from 'src/components/customselectinput'\n\nconst animatedComponents = makeAnimated()\n\nconst CreateNewSales = (props) => {\n  return new Promise((resolve) => {\n    let el = document.createElement('div')\n\n    const handleResolve = (result) => {\n      unmountComponentAtNode(el)\n      el = null\n      resolve(result)\n    }\n\n    render(<DialogContent {...props} onExit={handleResolve} />, el)\n  })\n}\n\nconst DialogContent = (props) => {\n  const { show } = { ...props }\n  const [visible, setVisible] = useState(show)\n  const [options, setOptions] = useState([\n    {\n      value: 0,\n      label: 'Vietnam',\n    },\n    {\n      value: 1,\n      label: 'Thailand',\n    },\n  ])\n\n  return (\n    <CModal visible={visible} onClose={() => setVisible(false)} size=\"lg\">\n      <CModalHeader onClose={() => setVisible(false)}>\n        <CModalTitle style={{ color: '#000000', fontSize: '18px' }}>\n          Add New Sales Value\n        </CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        <CFormLabel style={{ color: '#000000' }}>Required Information</CFormLabel>\n        <CRow>\n          <CCol md={6}>\n            <CFormLabel>Campaign Name</CFormLabel>\n            <div className=\"mb-3\">\n              <CustomSelectInput\n                InputcloseMenuOnSelect={true}\n                components={animatedComponents}\n                // defaultValue={options}\n                options={options}\n                placeholder=\"Campaign Name\"\n              />\n            </div>\n\n            <CFormLabel>Campaign Type</CFormLabel>\n            <div className=\"mb-3\">\n              <CustomSelectInput\n                InputcloseMenuOnSelect={true}\n                components={animatedComponents}\n                // defaultValue={options}\n                options={options}\n                placeholder=\"Campaign Type\"\n              />\n            </div>\n\n            <CFormLabel>Number of customers</CFormLabel>\n            <CInputGroup className=\"mb-3\">\n              <CFormInput\n                type=\"number\"\n                id=\"number\"\n                min=\"0\"\n                onChange={() => {}}\n                placeholder=\"Number of customers\"\n              />\n            </CInputGroup>\n          </CCol>\n\n          <CCol md={6}>\n            <CFormLabel>Sales Date</CFormLabel>\n            <CInputGroup className=\"mb-3\">\n              <CFormInput type=\"date\" id=\"sale-date\" onChange={() => {}} placeholder=\"Sales date\" />\n            </CInputGroup>\n            <CFormLabel>Sales Value</CFormLabel>\n            <CInputGroup className=\"mb-3\">\n              <CInputGroupText>$</CInputGroupText>\n              <CFormInput\n                type=\"number\"\n                min=\"0\"\n                id=\"sale-date\"\n                onChange={() => {}}\n                placeholder=\"Sales value\"\n              />\n            </CInputGroup>\n            <CFormLabel>Notes</CFormLabel>\n            <CInputGroup className=\"mb-3\">\n              <CFormTextarea\n                id=\"note\"\n                rows=\"1\"\n                onChange={() => {}}\n                placeholder=\"Notes\"\n              ></CFormTextarea>\n            </CInputGroup>\n          </CCol>\n        </CRow>\n      </CModalBody>\n      <CModalFooter>\n        <CustomButton color=\"secondary\" onClick={() => setVisible(false)}>\n          Cancel\n        </CustomButton>\n        <CustomButton color=\"light\">Add & Continue</CustomButton>\n        <CustomButton color=\"primary\">Add & Close</CustomButton>\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default CreateNewSales\n","import React, { useState } from 'react'\nimport {\n  CButtonGroup,\n} from '@coreui/react'\nimport CustomButton from 'src/components/custombutton'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faDownload,\n  faUpload,\n} from '@fortawesome/free-solid-svg-icons'\nimport styled from 'styled-components'\nimport makeAnimated from 'react-select/animated'\nimport { DatePicker } from 'antd';\nimport ImportTrackSale from '../../track-sale-list/components/import-track-sale'\nimport { useHistory } from 'react-router-dom'\n\nconst { RangePicker } = DatePicker;\nconst dateFormat = 'YYYY/MM/DD';\n\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 11px;\n\n  @media only screen and (max-width: 1200px) {\n    flex-direction: column;\n  }\n`\n\nconst InputSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n`\n\nconst animatedComponents = makeAnimated()\n\nconst ImportHistoryHeader = () => {\n  const history = useHistory()\n\n  const [showFilterBox, setShowFilterBox] = useState(true)\n  const [showColumnsBox, setShowColumnsBox] = useState(false)\n  const [filter, setFilter] = useState({\n    campaignSearchText: '',\n    campaignSearch: [],\n    campaignTypes: [],\n    status: null,\n  })\n\n\n  return (\n    <>\n      <div className=\"d-flex flex-row w-100 justify-content-between mb-2\">\n        <div className=\"d-flex flex-row gap-2\">\n\n        </div>\n\n        <div className=\"d-flex flex-row gap-2\">\n          <CButtonGroup>\n            <CustomButton color=\"secondary\"\n              onClick={() => ImportTrackSale({ show: true, history })}>\n              <div>\n                <FontAwesomeIcon icon={faUpload} className=\"me-1\" />\n                Import\n              </div>\n            </CustomButton>\n          </CButtonGroup>\n          <CButtonGroup>\n            <CustomButton color=\"secondary\">\n              <FontAwesomeIcon icon={faDownload} className=\"me-1\" />\n              Export\n            </CustomButton>\n          </CButtonGroup>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default ImportHistoryHeader\n","import React, { useState } from 'react'\nimport {\n  CCol,\n  CFormInput,\n  CFormLabel,\n  CFormTextarea,\n  CInputGroup,\n  CInputGroupText,\n  CModal,\n  CModalBody,\n  CModalFooter,\n  CModalHeader,\n  CModalTitle,\n  CRow,\n} from '@coreui/react'\nimport { render, unmountComponentAtNode } from 'react-dom'\nimport CustomButton from '../../../../components/custombutton'\nimport makeAnimated from 'react-select/animated'\nimport CustomSelectInput from 'src/components/customselectinput'\n\nconst animatedComponents = makeAnimated()\n\nconst ViewOrEditSaleValue = (props) => {\n  return new Promise((resolve) => {\n    let el = document.createElement('div')\n\n    const handleResolve = (result) => {\n      unmountComponentAtNode(el)\n      el = null\n      resolve(result)\n    }\n\n    render(<DialogContent {...props} onExit={handleResolve} />, el)\n  })\n}\n\nconst DialogContent = (props) => {\n  const { show, isViewed } = { ...props }\n  const [visible, setVisible] = useState(show)\n  const [options, setOptions] = useState([\n    {\n      value: 0,\n      label: 'Vietnam',\n    },\n    {\n      value: 1,\n      label: 'Thailand',\n    },\n  ])\n  const className = isViewed ? '' : 'required';\n  return (\n    <CModal visible={visible} onClose={() => setVisible(false)} size=\"lg\">\n      <CModalHeader onClose={() => setVisible(false)}>\n        <CModalTitle style={{ color: '#000000', fontSize: '18px' }}>\n          {isViewed ? 'Sales Value' : ' Edit Sales Value'}\n        </CModalTitle>\n      </CModalHeader>\n      <CModalBody>\n        {\n          !isViewed ? (\n            <CFormLabel style={{ color: '#000000' }}><span style={{color:'red'}}>*</span> Required Information</CFormLabel>\n          ) : null\n        }\n        <CRow>\n          <CCol md={6}>\n            <CFormLabel>Campaign Name</CFormLabel>\n            <div className=\"mb-3\">\n              <CustomSelectInput\n              className='disable-select'\n                InputcloseMenuOnSelect={true}\n                components={animatedComponents}\n                // defaultValue={options}\n                options={options}\n                isDisabled\n                placeholder=\"Campaign Name\"\n              />\n            </div>\n\n            <CFormLabel className={className}>Campaign Type</CFormLabel>\n            <div className=\"mb-3\">\n              <CustomSelectInput\n                            className='disable-select'\n                InputcloseMenuOnSelect={true}\n                components={animatedComponents}\n                // defaultValue={options}\n                isDisabled\n                options={options}\n                placeholder=\"Campaign Type\"\n              />\n            </div>\n\n            <CFormLabel className={className}>Number of customers</CFormLabel>\n            <CInputGroup className=\"mb-3\">\n              <CFormInput\n                type=\"number\"\n                id=\"number\"\n                min=\"0\"\n                onChange={() => { }}\n                disabled={isViewed}\n                placeholder=\"Number of customers\"\n              />\n            </CInputGroup>\n          </CCol>\n\n          <CCol md={6}>\n            <CFormLabel className={className}>Sales Date</CFormLabel>\n            <CInputGroup className=\"mb-3\">\n              <CFormInput type=\"date\" id=\"sale-date\"\n                disabled={isViewed}\n                onChange={() => { }} placeholder=\"Sales date\" />\n            </CInputGroup>\n            <CFormLabel className={className}>Sales Value</CFormLabel>\n            <CInputGroup className=\"mb-3\">\n              <CInputGroupText>$</CInputGroupText>\n              <CFormInput\n                type=\"number\"\n                min=\"0\"\n                id=\"sale-date\"\n                onChange={() => { }}\n                disabled={isViewed}\n                placeholder=\"Sales value\"\n              />\n            </CInputGroup>\n            <CFormLabel>Notes</CFormLabel>\n            <CInputGroup className=\"mb-3\">\n              <CFormTextarea\n                id=\"note\"\n                rows=\"1\"\n                disabled={isViewed}\n                onChange={() => { }}\n                placeholder=\"Notes\"\n              ></CFormTextarea>\n            </CInputGroup>\n          </CCol>\n        </CRow>\n      </CModalBody>\n      <CModalFooter>\n        <CustomButton color=\"secondary\" onClick={() => setVisible(false)}>\n          Cancel\n        </CustomButton>\n        {\n          !isViewed ? (\n            <>\n              <CustomButton color=\"light\">Update & Continue</CustomButton>\n              <CustomButton color=\"primary\">Update & Close</CustomButton>\n            </>\n          ) : null\n        }\n      </CModalFooter>\n    </CModal>\n  )\n}\n\nexport default ViewOrEditSaleValue\n","import React, { useEffect, useState } from 'react'\nimport { CustomTable } from 'src/components'\nimport CustomButton from 'src/components/custombutton'\nimport TrashIcon from 'src/assets/icons/trash.svg'\nimport EditIcon from 'src/assets/icons/edit.svg'\nimport { EyeOutlined, InfoCircleOutlined } from '@ant-design/icons'\nimport { CFormCheck } from '@coreui/react'\nimport ConfirmDialog from 'src/components/popup'\nimport ViewOrEditSaleValue from '../components/view-or-edit-track-sale'\nimport { useHistory } from 'react-router-dom'\n\nconst trackListColsData = {\n  settingColumns: [\n    {\n      label: 'Campaign ID',\n      value: 'campaignId',\n    },\n    {\n      label: 'Campain Name',\n      value: 'campaignName',\n    },\n    {\n      label: 'Sale Date',\n      value: 'salesDate',\n    },\n    {\n      label: 'Campaign Type ',\n      value: 'campaignType',\n    },\n    {\n      label: 'Sales Value',\n      value: 'saleValue',\n    },\n    {\n      label: 'Status',\n      value: 'status',\n    },\n  ],\n  selectedShowColumns: [\n    {\n      label: 'Campaign ID',\n      value: 'campaignId',\n    },\n    {\n      label: 'Campain Name',\n      value: 'campaignName',\n    },\n    {\n      label: 'Sale Date',\n      value: 'salesDate',\n    },\n    {\n      label: 'Campaign Type ',\n      value: 'campaignType',\n    },\n    {\n      label: 'Sales Value',\n      value: 'saleValue',\n    },\n    {\n      label: 'Status',\n      value: 'status',\n    },\n  ],\n}\n\nconst TrackSalesList = () => {\n  const tableData = {\n    columns: [\n      {\n        name: 'Campaign ID',\n        selector: 'campaignId',\n        sortable: true,\n      },\n      {\n        name: 'Campaign Name',\n        selector: 'campaignName',\n        sortable: true,\n      },\n      {\n        name: <div className=\"text-center\">Sales Date</div>,\n        selector: 'salesDate',\n        sortable: true,\n      },\n      {\n        name: <div className=\"text-center\">Campaign Type</div>,\n        selector: 'campaignType',\n        sortable: true,\n      },\n      {\n        name: <div className=\"text-center\">Sales Value</div>,\n        selector: 'saleValue',\n        sortable: true,\n      },\n      {\n        name: <div className=\"text-center\">Status</div>,\n        selector: 'status',\n        sortable: true,\n        render: (col, obj) => {\n          return obj.status ? (\n            <div className=\"text-center\">Active</div>\n          ) : (\n            <div className=\"text-center\">Expired</div>\n          )\n        },\n      },\n      {\n        name: <div className=\"text-center w-100\">Action</div>,\n        selector: 'action',\n        ignoreHide: true,\n        render: (col, obj) => (\n          <div className=\"d-flex flex-row justify-content-center\" key={obj.id}>\n            <CustomButton\n              color=\"main\"\n              onClick={() =>\n                ViewOrEditSaleValue({\n                  show: true,\n                  isViewed: true,\n                })\n              }\n            >\n              <EyeOutlined style={{ fontSize: '23px' }} />\n            </CustomButton>\n            <CustomButton\n              color=\"main\"\n              onClick={() => history.push(`/track-sales/track-sale-detail?id=${1000111}`)}\n            >\n              <InfoCircleOutlined style={{ fontSize: '19px' }} />\n            </CustomButton>\n\n            <CustomButton\n              color=\"main\"\n              onClick={() =>\n                ViewOrEditSaleValue({\n                  show: true,\n                  isViewed: false,\n                })\n              }\n            >\n              <img src={EditIcon} />\n            </CustomButton>\n            <CustomButton color=\"main\">\n              <img\n                src={TrashIcon}\n                onClick={() =>\n                  ConfirmDialog({\n                    show: true,\n                    message: (\n                      <span>\n                        Are you sure you want to <b>delete</b> {obj.campaignName}?\n                      </span>\n                    ),\n                  })\n                }\n              />\n            </CustomButton>\n          </div>\n        ),\n      },\n    ],\n    data: [\n      {\n        campaignId: 642,\n        campaignName: 'HUPER 2022',\n        salesDate: <div className=\"text-center\">Nov 14, 2021</div>,\n        campaignType: <div className=\"text-center\">Campaign only</div>,\n        saleValue: <div className=\"text-end\">$0.05</div>,\n        status: 'Actived',\n      },\n      {\n        campaignId: 643,\n        campaignName: 'HUPER 2022',\n        salesDate: <div className=\"text-center\">Nov 14, 2021</div>,\n        campaignType: <div className=\"text-center\">Campaign only</div>,\n        saleValue: <div className=\"text-end\">$0.05</div>,\n        status: 'Actived',\n      },\n      {\n        campaignId: 644,\n        campaignName: 'HUPER 2022',\n        salesDate: <div className=\"text-center\">Nov 14, 2021</div>,\n        campaignType: <div className=\"text-center\">Campaign only</div>,\n        saleValue: <div className=\"text-end\">$0.05</div>,\n        status: 'Actived',\n      },\n      {\n        campaignId: 643,\n        campaignName: 'HUPER 2022',\n        salesDate: <div className=\"text-center\">Nov 14, 2021</div>,\n        campaignType: <div className=\"text-center\">Campaign only</div>,\n        saleValue: <div className=\"text-end\">$0.05</div>,\n        status: 'Actived',\n      },\n      {\n        campaignId: 642,\n        campaignName: 'HUPER 2022',\n        salesDate: <div className=\"text-center\">Nov 14, 2021</div>,\n        campaignType: <div className=\"text-center\">Campaign only</div>,\n        saleValue: <div className=\"text-end\">$0.05</div>,\n        status: 'Actived',\n      },\n    ],\n  }\n  const history = useHistory()\n  const TrackSaleHeader = React.lazy(() => import('./components/header'))\n  const [trackSaleColumns, setTrackSaleColumns] = useState(tableData.columns)\n  const [settingColumns, setSettingColumns] = useState(trackListColsData.settingColumns)\n  const [selectedShowColumns, setSelectedShowColumns] = useState(\n    trackListColsData.selectedShowColumns,\n  )\n  const [isShownFilterCols, setIsShownFilterCols] = useState(false)\n  useEffect(() => {}, [])\n\n  const filterColumnsTable = (selectedCols) => {\n    const shownCols = tableData.columns.filter(\n      (t) => selectedCols.findIndex((s) => t.ignoreHide == true || t.selector == s.value) > -1,\n    )\n    setTrackSaleColumns(shownCols)\n    setSelectedShowColumns(selectedCols)\n    setIsShownFilterCols(true)\n  }\n\n  return (\n    <CustomTable\n      data={tableData.data}\n      columns={trackSaleColumns}\n      Header={() => (\n        <TrackSaleHeader\n          filterColumnsTable={filterColumnsTable}\n          settingColumns={settingColumns}\n          selectedShowColumns={selectedShowColumns}\n          isShownFilterCols={isShownFilterCols}\n        />\n      )}\n    />\n  )\n}\n\nexport default TrackSalesList\n","import React, { useState } from 'react'\nimport { CustomTable } from 'src/components'\nimport CustomButton from 'src/components/custombutton'\nimport { EyeOutlined } from '@ant-design/icons'\nimport { CFormCheck } from '@coreui/react'\nimport ImportHistoryHeader from './components/header'\nimport { useHistory } from 'react-router-dom'\nimport ViewOrEditSaleValue from '../components/view-or-edit-track-sale'\nimport DeletingMultiple from 'src/components/deleting-multiple'\n\nconst ImportHistory = () => {\n  const history = useHistory();\n  const TrackSaleHeader = React.lazy(() => import('./components/header'))\n  const [selectedRows, setSelectedRows] = useState([])\n\n  const handleChange = (e) => {\n    const { id, checked } = e.target\n\n    // display checkbox UI\n    if (id === 'all-selected') {\n      setData((prevState) => {\n        let temp = prevState.map((dt) => {\n          return { ...dt, isChecked: checked }\n        })\n        return temp\n      })\n    } else {\n      setData((prevState) => {\n        let temp = prevState.map((dt) => (dt.id.toString() === id ? { ...dt, isChecked: checked } : dt))\n        return temp\n      })\n    }\n\n    // save ids into selectedRows\n    setSelectedRows((prevState) => {\n      if (id === 'all-selected') {\n        if (prevState.length !== data.length) {\n          return data.map((i) => i.id)\n        } else {\n          return []\n        }\n      } else {\n        let newArray = [...prevState, id]\n        if (prevState.includes(id)) {\n          newArray = newArray.filter((item) => item !== id)\n        }\n        return newArray\n      }\n    })\n  }\n\n  const [data, setData] = useState([\n    {\n      id: 1,\n      campaignId: 642,\n      CampaignName: 'HUPER 2022',\n      salesDate: <div className=\"text-center\">Nov 14, 2021</div>,\n      campaignType: <div className=\"text-center\">Campaign only</div>,\n      saleValue: <div className=\"text-end\">$0.05</div>,\n      status: 'Actived',\n    },\n    {\n      id: 2,\n      campaignId: 643,\n      CampaignName: 'HUPER 2022',\n      salesDate: <div className=\"text-center\">Nov 14, 2021</div>,\n      campaignType: <div className=\"text-center\">Campaign only</div>,\n      saleValue: <div className=\"text-end\">$0.05</div>,\n      status: 'Actived',\n    },\n    {\n      id: 3,\n      campaignId: 644,\n      CampaignName: 'HUPER 2022',\n      salesDate: <div className=\"text-center\">Nov 14, 2021</div>,\n      campaignType: <div className=\"text-center\">Campaign only</div>,\n      saleValue: <div className=\"text-end\">$0.05</div>,\n      status: 'Actived',\n    },\n    {\n      id: 4,\n      campaignId: 643,\n      CampaignName: 'HUPER 2022',\n      salesDate: <div className=\"text-center\">Nov 14, 2021</div>,\n      campaignType: <div className=\"text-center\">Campaign only</div>,\n      saleValue: <div className=\"text-end\">$0.05</div>,\n      status: 'Actived',\n    },\n    {\n      id: 5,\n      campaignId: 642,\n      CampaignName: 'HUPER 2022',\n      salesDate: <div className=\"text-center\">Nov 14, 2021</div>,\n      campaignType: <div className=\"text-center\">Campaign only</div>,\n      saleValue: <div className=\"text-end\">$0.05</div>,\n      status: 'Actived',\n    },\n  ])\n\n  const tableData = {\n    columns: [\n      {\n        name: (\n          <div className=\"text-center\">\n            <CFormCheck\n              type=\"checkbox\"\n              id=\"all-selected\"\n              checked={data.filter((dt) => dt?.isChecked !== true).length < 1}\n              onChange={handleChange}\n            />\n          </div>\n        ),\n        className:' align-center-col-name',\n        selector: 'checkbox',\n        render: (col, obj) => {\n          return (\n            <div className=\"text-center\">\n              <CFormCheck\n                type=\"checkbox\"\n                id={`${obj.id}`}\n                checked={obj?.isChecked || false}\n                onChange={handleChange}\n              />\n            </div>\n          )\n        },\n      },\n      {\n        name: 'Campaign ID',\n        selector: 'campaignId',\n        sortable: true,\n      },\n      {\n        name: 'Campaign Name',\n        selector: 'CampaignName',\n        sortable: true,\n      },\n      {\n        name: <div className=\"text-center\">Sales Date</div>,\n        selector: 'salesDate',\n        sortable: true,\n      },\n      {\n        name: <div className=\"text-center\">Campaign Type</div>,\n        selector: 'campaignType',\n        sortable: true,\n      },\n      {\n        name: <div className=\"text-center\">Sales Value</div>,\n        selector: 'saleValue',\n        sortable: true,\n      },\n      {\n        name: <div className=\"text-center\">Status</div>,\n        selector: 'status',\n        sortable: true,\n        render: (col, obj) => {\n          return obj.status ? (\n            <div className=\"text-center\">Active</div>\n          ) : (\n            <div className=\"text-center\">Expired</div>\n          )\n        },\n      },\n      {\n        name: <div className=\"text-center\">Action</div>,\n        selector: 'action',\n        render: (col, obj) => (\n          <div className=\"d-flex flex-row justify-content-center\" key={obj.campaignId}>\n            <CustomButton color=\"main\"\n              onClick={() => {\n                history.push(`/track-sales/show-imported-history?id=${6456}`);\n              }}\n            >\n              <EyeOutlined style={{ fontSize: '23px' }} />\n            </CustomButton>\n          </div>\n        ),\n      },\n    ],\n  }\n  console.log('xxxx', data);\n  return (\n    <CustomTable id=\"track-sale-table\" columns={tableData.columns} data={data}\n      Header={() => (\n        <>\n          <ImportHistoryHeader />\n          <DeletingMultiple selectedRows={selectedRows.length} />\n\n        </>\n      )}\n    />\n  )\n}\n\nexport default ImportHistory\n","import React, { useState } from 'react'\nimport {\n  CNav,\n  CNavItem,\n  CNavLink,\n} from '@coreui/react'\nimport makeAnimated from 'react-select/animated'\nimport styled, { css } from 'styled-components'\nimport TrackSalesList from './track-sale-list'\nimport ImportHistory from './import-history'\nimport './style.css'\nimport CreateNewSales from '../campaign/components/add-sales-value'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCircleDollarToSlot, faPlus } from '@fortawesome/free-solid-svg-icons'\nimport CustomButton from 'src/components/custombutton'\n\nconst animatedComponents = makeAnimated()\n\nconst CustomNav = styled(CNav)`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  width: 100%;\n\n  @media only screen and (max-width: 576px) {\n    flex-direction: column;\n  }\n`\n\nconst AutoButton = styled.div`\n  margin-right: 16px;\n\n  @media only screen and (max-width: 576px) {\n    margin: 16px 0px 16px 16px;\n  }\n`\n\nconst FormInputSummary = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  gap: 11px;\n  margin: 4px 0 12px 0;\n\n  @media only screen and (max-width: 992px) {\n    flex-direction: column;\n    align-items: start;\n  }\n`\n\nconst FormDate = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 11px;\n  align-items: center;\n  ${(props) =>\n    props.user &&\n    css`\n      width: 100%;\n    `}\n\n  @media screen and (max-width: 576px) {\n    flex-direction: column;\n  }\n`\n\nconst UserContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  gap: 11px;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  margin: 4px 0 12px 0;\n\n  @media only screen and (max-width: 1420px) {\n    flex-direction: column;\n    align-items: start;\n  }\n`\n\nconst InputSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  @media only screen and (max-width: 1420px) {\n    margin-bottom: 10px;\n  }\n`\n\nconst ButtonGroup = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-top: 25px;\n\n  @media only screen and (max-width: 1420px) {\n    margin-top: 5px;\n  }\n`\n\nconst UserManagement = () => {\n  const [activeTab, setActiveTab] = useState('track-sales-list')\n  console.log('UserManagement');\n  const toggle = (tab) => {\n    if (activeTab !== tab) setActiveTab(tab)\n  }\n\n  return (\n    <>\n      <div className=\"d-flex flex-column bg-white mb-2\">\n        <CustomNav variant=\"tabs\" role=\"tablist\" className=\"border-secondary my-2\">\n          <div className=\"d-flex flex-row align-items-center\">\n            <CNavItem>\n              <CNavLink\n                active={activeTab === 'track-sales-list'}\n                style={{ cursor: 'pointer' }}\n                onClick={() => toggle('track-sales-list')}\n                className={`border-0 ${activeTab === 'track-sales-list'\n                  ? 'text-primary border-bottom border-primary'\n                  : 'text-dark border-bottom border-secondary'\n                  }`}\n              >\n                Track Sale List\n              </CNavLink>\n            </CNavItem>\n            <CNavItem>\n              <CNavLink\n                active={activeTab === 'import-history'}\n                style={{ cursor: 'pointer' }}\n                onClick={() => toggle('import-history')}\n                className={`border-0 ${activeTab === 'import-history'\n                  ? 'text-primary border-bottom border-primary'\n                  : 'text-dark border-bottom border-secondary'\n                  }`}\n              >\n                Import History\n              </CNavLink>\n            </CNavItem>\n          </div>\n          <ButtonGroup className='add-new-track-sale'>\n            <CustomButton\n              color=\"primary\"\n              className=\"py-1\"\n              onClick={() => CreateNewSales({ show: true })}\n            >\n              <FontAwesomeIcon icon={faCircleDollarToSlot} className=\"me-1\" />\n              Add sale value\n            </CustomButton>\n          </ButtonGroup>\n        </CustomNav>\n        {activeTab === 'track-sales-list' ? <TrackSalesList /> : <ImportHistory />}\n\n\n      </div>\n\n    </>\n  )\n}\n\nexport default UserManagement\n","import React, { useState } from 'react'\nimport { faCheck, faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nexport const showError = ({ message }) => {\n    toast.error(\n        <div>\n            <div>\n                {/* <FontAwesomeIcon icon={faExclamationCircle} className=\"mr-2\" /> */}\n                <span>{message}</span>\n            </div>\n        </div>,\n        {\n            position: \"top-center\",\n            autoClose: 3000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: false,\n        }\n    );\n};\n\nexport const showSuccess = ({ message }) => {\n    toast.success(\n        <div>\n            <div>\n                {/* <FontAwesomeIcon icon={faCheck} className=\"mr-2\" /> */}\n                <span>{message}</span>\n            </div>\n        </div>,\n        {\n            position: \"top-center\",\n            autoClose: 3000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: false,\n        }\n    );\n};\n","import React, { useRef, useState } from 'react'\nimport {\n    CButtonGroup,\n    CCol,\n    CFormInput,\n    CFormLabel,\n    CInputGroup,\n    CModal,\n    CModalBody,\n    CModalFooter,\n    CModalHeader,\n    CModalTitle,\n    CRow,\n} from '@coreui/react'\nimport { render, unmountComponentAtNode } from 'react-dom'\nimport CustomButton from '../../../../../components/custombutton'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDownload, faFileCircleExclamation, faUpload } from '@fortawesome/free-solid-svg-icons'\nimport CSVReader from 'react-csv-reader'\nimport CustomSelectInput from 'src/components/customselectinput'\nimport makeAnimated from 'react-select/animated'\nimport { showError } from 'src/components/toastify'\n\nconst animatedComponents = makeAnimated()\n\nconst parseOptions = {\n    header: true,\n    dynamicTyping: true,\n    skipEmptyLines: true,\n    transformHeader: (header) => header.toLowerCase().replace(/\\W/g, \"_\"),\n};\n\nconst ImportTrackSale = (props) => {\n    return new Promise((resolve) => {\n        let el = document.createElement('div')\n\n        const handleResolve = (result) => {\n            unmountComponentAtNode(el)\n            el = null\n            resolve(result)\n        }\n\n        render(<DialogContent {...props} onExit={handleResolve} />, el)\n    })\n}\n\nconst DialogContent = (props) => {\n    const { show } = { ...props }\n    const { history } = { ...props }\n    const csvReaderRef = useRef(null);\n    const [options, setOptions] = useState([\n        {\n            value: 0,\n            label: 'dd/mm/yyyy',\n        },\n        {\n            value: 1,\n            label: 'mm/dd/yyyy',\n        },\n    ])\n    const [visible, setVisible] = useState(show)\n    const [fileName, setFileName] = useState('');\n    const [importData, setImportData] = useState([]);\n\n    const importHistory = () => {\n        if (fileName) {\n            setVisible(false)\n            history.push('/track-sales/preview-imported-history', { importedHistory: importData });\n        } else {\n            showError({ message: \"Please upload *.csv file to import\" });\n        }\n    }\n\n    const triggerImport = () => {\n        document.getElementById(\"CSVReader\").click();\n        // if (csvReaderRef.current !== null) {\n        //     csvReaderRef.current.click();\n        // }\n    }\n\n    const onFileLoaded = (data, fileInfo) => {\n        console.log('onFileLoaded1', data);\n        console.log('onFileLoaded2', fileInfo);\n        setFileName(fileInfo.name);\n        setImportData(data);\n        document.getElementById(\"CSVReader\").value = \"\";\n    }\n\n    return (\n        <CModal visible={visible} onClose={() => setVisible(false)}>\n            <CModalHeader onClose={() => setVisible(false)}>\n                <CModalTitle style={{ color: '#000000', fontSize: '18px' }}><b>Import Track Sale</b></CModalTitle>\n            </CModalHeader>\n            <CModalBody style={{ fontSize: '14px' }}>\n                <CRow className=\"mb-1\">\n                    <CCol md={4} className=\"center-label\">\n                        <CFormLabel>Select date format:</CFormLabel>\n                    </CCol>\n                    <CCol md={5}>\n                        <CInputGroup>\n                            {/* <CFormInput type=\"date\" id=\"start-date\" onChange={() => { }} /> */}\n                            <CustomSelectInput\n                                closeMenuOnSelect={true}\n                                components={animatedComponents}\n                                defaultValue={options[0]}\n                                options={options}\n                                placeholder=\"Date format\"\n                            />\n                        </CInputGroup>\n                    </CCol>\n\n                </CRow>\n                <CRow className=\"mb-1\">\n                    <CCol>\n                        <div className=\"d-flex flex-row\">\n                            <span className=\"me-4\">Supported file type:</span>\n                            <b>.csv</b>\n                        </div>\n                    </CCol>\n\n                </CRow>\n                <CRow className=\"mb-1\">\n                    <CCol>\n                        <CButtonGroup className=\"me-4\">\n                            <CustomButton color=\"primary\"\n                                onClick={triggerImport}\n                            >\n                                <FontAwesomeIcon icon={faUpload} className=\"me-2\" />\n                                Select file\n                                <CSVReader\n                                    cssClass=\"d-none\"\n                                    inputId=\"CSVReader\"\n                                    label=\"Supported file type: .csv\"\n                                    onFileLoaded={onFileLoaded}\n                                    parserOptions={parseOptions}\n                                    inputStyle={{ color: \"red\" }}\n                                // ref={csvReaderRef}\n                                />\n                            </CustomButton>\n                        </CButtonGroup>\n                        <span>{fileName}</span>\n                    </CCol>\n                </CRow>\n                <CRow>\n                    <CCol>\n                        <CustomButton\n                            color=\"link\"\n                            className='import-track-sale'\n                            onClick={() => { }}\n                        >\n                            <FontAwesomeIcon icon={faDownload} className=\"me-2\" />\n                            Download Default file\n                        </CustomButton>\n\n                    </CCol>\n                    <CCol>\n                        <CustomButton\n                            color=\"link\"\n                            className='import-track-sale'\n                            onClick={() => { }}\n                        >\n                            <FontAwesomeIcon icon={faFileCircleExclamation} className=\"me-2\" />\n                            Instruction to Use\n                        </CustomButton>\n\n                    </CCol>\n                </CRow>\n\n            </CModalBody>\n            <CModalFooter>\n                <CustomButton color=\"primary\" onClick={importHistory}>Import</CustomButton>\n                <CustomButton color=\"secondary\" onClick={() => setVisible(false)}>\n                    Close\n                </CustomButton>\n            </CModalFooter>\n        </CModal>\n    )\n}\n\nexport default ImportTrackSale\n"],"names":["animatedComponents","makeAnimated","DialogContent","props","show","visible","setVisible","useState","options","setOptions","value","label","_jsxs","CModal","onClose","size","children","_jsx","CModalHeader","CModalTitle","style","color","fontSize","CModalBody","CFormLabel","CRow","CCol","md","className","CustomSelectInput","InputcloseMenuOnSelect","components","placeholder","CInputGroup","CFormInput","type","id","min","onChange","CInputGroupText","CFormTextarea","rows","CModalFooter","CustomButton","onClick","Promise","resolve","el","document","createElement","render","onExit","result","unmountComponentAtNode","RangePicker","DatePicker","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","_templateObject3","ImportHistoryHeader","history","useHistory","showFilterBox","setShowFilterBox","showColumnsBox","setShowColumnsBox","filter","setFilter","campaignSearchText","campaignSearch","campaignTypes","status","_Fragment","CButtonGroup","ImportTrackSale","FontAwesomeIcon","icon","faUpload","faDownload","isViewed","isDisabled","disabled","trackListColsData","TrackSalesList","tableData","columns","name","selector","sortable","col","obj","ignoreHide","ViewOrEditSaleValue","EyeOutlined","push","concat","InfoCircleOutlined","src","EditIcon","TrashIcon","ConfirmDialog","message","campaignName","data","campaignId","salesDate","campaignType","saleValue","TrackSaleHeader","React","trackSaleColumns","setTrackSaleColumns","settingColumns","setSettingColumns","selectedShowColumns","setSelectedShowColumns","isShownFilterCols","setIsShownFilterCols","useEffect","filterColumnsTable","selectedCols","shownCols","t","findIndex","s","CustomTable","Header","ImportHistory","selectedRows","setSelectedRows","handleChange","e","checked","target","setData","prevState","map","dt","isChecked","toString","length","i","newArray","includes","item","CampaignName","CFormCheck","console","log","DeletingMultiple","CustomNav","CNav","ButtonGroup","_templateObject4","user","css","_templateObject5","_templateObject6","_templateObject7","_templateObject8","UserManagement","activeTab","setActiveTab","toggle","tab","variant","role","CNavItem","CNavLink","active","cursor","CreateNewSales","faCircleDollarToSlot","parseOptions","header","dynamicTyping","skipEmptyLines","transformHeader","toLowerCase","replace","useRef","fileName","setFileName","importData","setImportData","closeMenuOnSelect","defaultValue","triggerImport","getElementById","click","CSVReader","cssClass","inputId","onFileLoaded","fileInfo","parserOptions","inputStyle","faFileCircleExclamation","importHistory","importedHistory","_ref","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","showError"],"sourceRoot":""}